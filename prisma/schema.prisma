generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model contracts {
  id                              Int       @id @default(autoincrement())
  contract_number                 Int
  car_model                       String    @db.VarChar(255)
  plate_number                    String    @db.VarChar(255)
  operation_type                  String    @db.VarChar(50)
  employee_name                   String    @db.VarChar(100)
  branch_name                     String    @db.VarChar(100)
  meter                           String?   @db.VarChar(512)
  right_doors                     String?   @db.VarChar(512)
  front_right_fender              String?   @db.VarChar(512)
  rear_right_fender               String?   @db.VarChar(512)
  rear_bumper_with_lights         String?   @db.VarChar(512)
  trunk_lid                       String?   @db.VarChar(512)
  roof                            String?   @db.VarChar(512)
  rear_left_fender                String?   @db.VarChar(512)
  left_doors                      String?   @db.VarChar(512)
  front_left_fender               String?   @db.VarChar(512)
  front_bumper                    String?   @db.VarChar(512)
  hoode                           String?   @db.VarChar(512)
  front_windshield                String?   @db.VarChar(512)
  trunk_contents                  String?   @db.VarChar(512)
  fire_extinguisher               String?   @db.VarChar(512)
  front_right_seat                String?   @db.VarChar(512)
  front_left_seat                 String?   @db.VarChar(512)
  rear_seat_with_front_seat_backs String?   @db.VarChar(512)
  other_images                    String?   @db.VarChar(512)
  client_id                       String    @db.VarChar(45)
  meter_reading                   String?   @db.VarChar(255)
  created_at                      DateTime? @default(now()) @db.DateTime(0)
  updated_at                      DateTime? @updatedAt @db.DateTime(0)
  client_name                     String    @db.VarChar(255)
  signature_url                   String?   @db.VarChar(512)
}

model users {
  Name          String
  id            Int             @id @default(autoincrement())
  EmID          Int             @unique
  password      String
  role          String
  branch        String
  created_at    DateTime?       @default(now()) @db.DateTime(0)
  updated_at    DateTime?       @default(now()) @db.DateTime(0)
  last_login    DateTime?       @db.DateTime(0)
  is_active     Boolean?        @default(true)
  tokens        tokens[]
  user_sessions user_sessions[]

  @@index([branch], map: "idx_users_branch")
  @@index([is_active], map: "idx_users_is_active")
  @@index([role], map: "idx_users_role")
  @@map("users")
}

model plateslist {
  id         Int     @id @default(autoincrement())
  plate_name String? @db.VarChar(512)
  cars       cars[]
}

model cars {
  id       Int         @id @default(autoincrement())
  car_name String      @db.VarChar(512)
  plate_id Int?
  plate    plateslist? @relation(fields: [plate_id], references: [id], onDelete: Restrict, map: "fk_cars_plateslist")

  @@index([plate_id], map: "fk_cars_plateslist")
}

model branches {
  id          Int    @id @default(autoincrement())
  branch_name String @db.VarChar(512)
}

model CarsDetails {
  owner_name           String? @db.VarChar(512)
  specification_policy String? @db.VarChar(512)
  Ref                  Int?
  make_no              Int?
  manufacturer         String? @db.VarChar(512)
  model_no             Int?
  model                String? @db.VarChar(512)
  type_no              String? @db.VarChar(512)
  Type                 String? @db.VarChar(512)
  seats                Int?
  manufacturing_year   Int?
  plate                String? @db.VarChar(512)
  sequance             Int?
  chassis              String? @db.VarChar(512)
  excess               Int?
  color                String? @db.VarChar(512)
  sum_insured          Int?
  premium              Int?
  id                   Int     @id @default(autoincrement())

  @@index([plate], map: "idx_plate")
  @@map("cars_details")
}

model tokens {
  id         Int         @id @default(autoincrement())
  user_id    Int
  token      String      @unique @db.VarChar(255)
  type       tokens_type
  expires_at DateTime    @db.DateTime(0)
  created_at DateTime?   @default(now()) @db.DateTime(0)
  is_active  Boolean?    @default(true)
  users      users       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, is_active, expires_at], map: "idx_tokens_active_user")
  @@index([expires_at])
  @@index([token])
  @@index([user_id])
  @@map("tokens")
}

model user_sessions {
  id            Int       @id @default(autoincrement())
  user_id       Int
  refresh_token String    @db.VarChar(255)
  device_info   String?   @db.Text
  ip_address    String?   @db.VarChar(45)
  last_activity DateTime? @default(now()) @db.DateTime(0)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, last_activity], map: "idx_sessions_user_activity")
  @@index([refresh_token])
  @@index([user_id])
  @@map("user_sessions")
}

enum tokens_type {
  access
  refresh
}
